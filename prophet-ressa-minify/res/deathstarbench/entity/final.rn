fn done(ndx, tokens) {
  match tokens.get(`${ndx}`).iter().next() {
    Some(Some(_)) => false,
    _ => true
  }
}
fn parse_pair(parent_tag, tokens, ndx, ctx) {
  loop {
    ndx = do_parse_pair(parent_tag, tokens, ndx, ctx);
    if done(ndx, tokens) { break; }
    match tokens.get(`${ndx}`).iter().next() {
      Some(Some(token)) => {
        if token == "}" { break; }
      }
      _ => {},
    }
  }
  ndx
}
fn do_parse_pair(parent_tag, tokens, ndx, ctx) {
  ndx = choose_action(parent_tag, tokens, ndx, ctx);
  loop {
    match tokens.get(`${ndx}`).iter().next() {
      Some(Some(token)) => {
        if token == "{" {
          ndx = choose_action(parent_tag, tokens, ndx + 1, ctx);
        } else { break; }
      }
      _ => return -100,
    }
  }
  let lhs = tokens.get(`${ndx}`).iter().next().unwrap().iter().next().unwrap();
  ndx = choose_action(`${parent_tag}.${lhs}`, tokens, ndx + 1, ctx);
  if done(ndx, tokens) { return -100; }
  let rhs = tokens.get(`${ndx}`).iter().next().unwrap().iter().next().unwrap();
  if rhs == "}" || rhs == "]" { return ndx; }
  if rhs == "[" { return parse_array_literal(parent_tag, tokens, ndx - 1, ctx); }
  ctx.make_attribute(parent_tag, lhs, Some(rhs));
  ndx + 1
}
fn do_and(parent_tag, tokens, ndx, ctx) {
  loop {
    match tokens.get(`${ndx}`).iter().next() {
      Some(Some(token)) => {
        if token != "]" {
          ndx = choose_action(parent_tag, tokens, ndx + 1, ctx);
        } else { break; }
      }
      _ => return -100,
    }
  }
  ndx
}
fn parse_array(parent_tag, tokens, ndx, ctx) {
  let array_name = tokens.get(`${ndx + 1}`).iter().next();
  array_name = match array_name {
    Some(Some(val)) => val,
    _ => return -100,
  };
  ctx.make_attribute(parent_tag, array_name, Some("[]"));
  choose_action(`${parent_tag}.${array_name}`, tokens, ndx + 2, ctx) + 1
}
fn parse_array_literal(parent_tag, tokens, ndx, ctx) {
  let array_name = tokens.get(`${ndx}`).iter().next();
  array_name = match array_name {
    Some(Some(val)) => val,
    _ => return -100,
  };
  ctx.make_attribute(parent_tag, array_name, Some("[]"));
  do_each(`${parent_tag}.${array_name}`, tokens, ndx + 2, ctx) + 1
}
fn do_each(parent_tag, tokens, ndx, ctx) {
  loop {
    match tokens.get(`${ndx}`).iter().next() {
      Some(Some(token)) => {
        if token != "]" {
          ndx = parse_pair(parent_tag, tokens, ndx + 1, ctx);
        } else { break; }
      }
      _ => return -100,
    }
  }
  ndx
}
fn do_elemMatch(parent_tag, tokens, ndx, ctx) { parse_pair(parent_tag, tokens, ndx, ctx) }
fn choose_action(parent, tokens, ndx, ctx) {
  if done(ndx, tokens) { return -1; }
  match tokens.get(`${ndx}`).iter().next() {
    Some(Some(token)) => match token {
      "$and" => do_and(parent, tokens, ndx + 1, ctx),
      "$not" => parse_pair(parent, tokens, ndx + 1, ctx),
      "$push" => parse_array(parent, tokens, ndx + 1, ctx),
      "$pull" => parse_array(parent, tokens, ndx + 1, ctx),
      "$each" => do_each(parent, tokens, ndx + 1, ctx),
      "projection" => panic("Unhandled"),
      "$elemMatch" => do_elemMatch(parent, tokens, ndx + 1, ctx),
      "{" => parse_pair(parent, tokens, ndx + 1, ctx),
      "}" => ndx + 1,
      "$position" => ndx + 2,
      "$set" => choose_action(parent, tokens, ndx + 1, ctx),
      other => {
        if !other.starts_with("$") { return ndx; }
        else { panic("Unknown command"); }
      }
    }
    _ => ndx
  }
}
fn cleanup(ctx) {
  ctx.make_transient("tokens");
  let tokens = ctx.get_object("tokens").unwrap();
  let ndx = 0;
  while tokens.contains_key(`${ndx}`) {
    ctx.make_attribute("tokens", `${ndx}`, None);
    ndx = ndx + 1;
  }
}

let tokens = ctx.get_object("tokens").unwrap();
let coll = ctx.get_variable("collection_name").unwrap();
match tokens.get("0").iter().next() {
  Some(Some(token)) => {
    if token.starts_with("$") || token == "{" || token == "[" {
      choose_action(coll, tokens, 0, ctx);
    } else if token != "projection" {
      parse_pair(coll, tokens, 0, ctx);
    } else {
      cleanup(ctx);
      panic("unhandled");
    }
  }
  _ => {
    cleanup(ctx);
    panic("No tokens");
  }
}
cleanup(ctx);